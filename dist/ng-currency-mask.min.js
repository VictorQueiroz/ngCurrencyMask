!function(){"use strict";angular.module("ngCurrencyMask",["ngCurrencyMask/Services","ngCurrencyMask/Directives","ngCurrencyMask/Filters","ngCurrencyMask/Providers"])}();
!function(){"use strict";angular.module("ngCurrencyMask/Service/Masker",[]).factory("Masker",["$currencyMask",function(e){var r=function(r,c){if(!r)return r;var n=r.toString();return n=n.replace(/^/,(c?c:e.currency)+" ")},c=function(c,n){var t=c.toString(),a=e.maskMatches;return a.forEach(function(e){"function"==typeof e.replace?t=e.replace(t):"object"==typeof e.replace&&(t=t.replace(e.replace,e.with))}),t=r(t,n)},n=function(r){var c=r.toString(),n=e.unmaskMatches;return n.forEach(function(e){"function"==typeof e.replace?c=e.replace(c):"object"==typeof e.replace&&(c=c.replace(e.replace,e.with))}),c};return{maskValue:c,unmaskValue:n}}])}();
!function(){"use strict";angular.module("ngCurrencyMask/Filter/currencyMask",[]).filter("currencyMask",["Masker",function(n){var r=function(n){switch(n){case"mask":return 1;case"unmask":return 2}},u=function(n){return null===n?null:n};return function(a,e,t){var e=e?r(e):r("mask"),c=t?u(t):u(null);if(1===e){var s=n.maskValue(a,c);return s}return 2===e?n.unmaskValue(a):void 0}}])}();
!function(){"use strict";angular.module("ngCurrencyMask/Provider/currencyMask",[]).provider("$currencyMask",function(){var e=this,r={currency:"R$",maskMatches:[{replace:function(e){return e.toString()}},{replace:function(e){var r=/(\.[0-9])(?=[0-9]{0}$)/g;return e.replace(r,"$10")}},{replace:function(e){return e.replace(e[e.lastIndexOf(".")],",")}},{replace:function(e){return"."!==e[e.length-3]&&(e=e.replace(/^(\d)*(?=(\d{0,})$)/g,"$&.00")),e}},{replace:/[^\d]/g,"with":""},{replace:/(\d{2})$/,"with":",$1"},{replace:/,(\d{3,})$/,"with":"$1,00"},{replace:/^(0{1,})/,"with":""},{replace:/^,(\d{2})$/,"with":"0,$1"},{replace:/(\d)(?=(\d{3})+(?!\d))/g,"with":"$1."}],unmaskMatches:[{replace:function(e){if(!e)return"";var r=e.match(/(^[\d\D]{0,})(\,)/)[1];return r&&(e=e.replace(r,r.replace(/\D/g,""))),e=e.replace(e[e.lastIndexOf(",")],"."),parseFloat(e)}}]};this.setCurrency=function(t){return r.currency=t,e},this.addUnmaskMatch=function(t,c){return r.unmaskMatches.unshift({replace:t,"with":c}),e},this.addMaskMatch=function(t,c){var n={};return c?(n.replace=t,n.with=c):n.replace=t,r.maskMatches.unshift(n),e},this.$get=function(){return r}})}();
!function(){"use strict";angular.module("ngCurrencyMask/Directives",["ngCurrencyMask/Directive/ngCurrencyMask"])}();
!function(){"use strict";angular.module("ngCurrencyMask/Filters",["ngCurrencyMask/Filter/currencyMask"])}();
!function(){"use strict";angular.module("ngCurrencyMask/Directive/ngCurrencyMask",[]).directive("ngCurrencyMask",["Masker",function(n){return{restrict:"A",require:["?ngModel"],link:function(r,e,u,t){var c=t[0],i=u.currency?u.currency:null,a=function(r){return n.maskValue(r,i)},s=function(r){return n.unmaskValue(r)},l=function(n){return s(n)};c.$parsers.push(l),r.$watch(u.ngModel,function(n){if(n&&!(n.length<1)){var r=a(n);r!=n&&(c.$setViewValue(r),c.$render())}})}}}])}();
!function(){"use strict";angular.module("ngCurrencyMask/Providers",["ngCurrencyMask/Provider/currencyMask"])}();
!function(){"use strict";angular.module("ngCurrencyMask/Services",["ngCurrencyMask/Service/Masker"])}();
//# sourceMappingURL=data:application/json;base64,