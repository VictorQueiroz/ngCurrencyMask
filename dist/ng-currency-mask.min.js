!function(){"use strict";angular.module("ngCurrencyMask",["ngCurrencyMask/Services","ngCurrencyMask/Directives","ngCurrencyMask/Filters","ngCurrencyMask/Providers"])}();
!function(){"use strict";angular.module("ngCurrencyMask.services.Masker",[]).factory("Masker",["$currencyMask",function(r){var e=function(e,n){if(!e)return e;var a=e.toString();return a=a.replace(/^/,(n?n:r.currency)+" ")},n=function(n,a){var c=n?n.toString():"",t=r.maskMatches;return t.forEach(function(r){c=r.replace instanceof Function?r.replace(c):c.replace(r.replace,r.with)}),c=e(c,a)},a=function(e){var n=e?e.toString():"",a=r.unmaskMatches;return a.forEach(function(r){n=r.replace instanceof Function?r.replace(n):n.replace(r.replace,r.with)}),n};return{maskValue:n,unmaskValue:a}}])}();
!function(){"use strict";angular.module("ngCurrencyMask.filters.currencyMask",[]).filter("currencyMask",["Masker",function(r){var n=function(r){switch(r){case"mask":return 1;case"unmask":return 2}},u=function(r){return null===r||"default"===r?null:r};return function(e,t,a){if(!e)return"";e=e.toString();var t=t?n(t):n("mask"),s=a?u(a):u(null);if(1===t){var c=r.maskValue(e,s);return c}return 2===t?r.unmaskValue(e):void 0}}])}();
!function(){"use strict";angular.module("ngCurrencyMask.providers.currencyMask",[]).provider("$currencyMask",function(){var e=[{replace:/(\.[0-9])(?=[0-9]{0}$)/g,"with":"$10"},{replace:/^(\d)*(?=(\d{0,})$)/g,"with":"$&,00"},{replace:/^(\d{1})$/,"with":"0,0$1"},{replace:/(\d{2})$/,"with":",$1"},{replace:/,(\d{3,})$/,"with":"$1,00"},{replace:/^,(\d{2})$/,"with":"0,$1"},{replace:/(?:\,{2,})+/g,"with":","},{replace:/[A-z{}\[\]_!\.]/g,"with":""},{replace:/(\d)(?=(\d{3})+(?!\d))/g,"with":"$1."}],r=[{replace:/\D/g,"with":""},{replace:/^(\d{1})$/,"with":"0.0$1"},{replace:/(\d{2})$/,"with":".$1"},{replace:/(,00|\.00$)/g,"with":""},{replace:/^(0{1,})/,"with":""},{replace:/^\.(\d{2})$/,"with":"0.$1"},{replace:function(e){if(!e)return"";var r=new RegExp(".(d{3,})$"),t=e.match(r);return t instanceof Array&&t[1]&&(e=e.replace(t,t.toString().substr(0,2))),e}}],t=this,c={currency:"R$",maskMatches:e,unmaskMatches:r};this.setCurrency=function(e){return c.currency=e,t},this.addUnmaskMatch=function(e,r){return c.unmaskMatches.unshift({replace:e,"with":r}),t},this.addMaskMatch=function(e,r){var a={};return r?(a.replace=e,a.with=r):a.replace=e,c.maskMatches.unshift(a),t},this.$get=function(){return c}})}();
!function(){"use strict";angular.module("ngCurrencyMask.directives",["ngCurrencyMask.directives.ngCurrencyMask"])}();
!function(){"use strict";angular.module("ngCurrencyMask/Filters",["ngCurrencyMask/Filter/currencyMask"])}();
!function(){"use strict";angular.module("ngCurrencyMask.directives.ngCurrencyMask",[]).directive("ngCurrencyMask",["Masker",function(n){return{restrict:"A",require:["?ngModel"],link:function(r,e,u,t){var c=t[0],i=u.currency?u.currency:null,a=function(r){return n.maskValue(r,i)},s=function(r){return n.unmaskValue(r)},l=function(n){return s(n)};c.$parsers.push(l),r.$watch(u.ngModel,function(n){if(n&&!(n.length<1)){var r=a(n);r!=n&&(c.$setViewValue(r),c.$render())}})}}}])}();
!function(){"use strict";angular.module("ngCurrencyMask.providers",["ngCurrencyMask.providers.currencyMask"])}();
!function(){"use strict";angular.module("ngCurrencyMask.services",["ngCurrencyMask.services.Masker"])}();
//# sourceMappingURL=data:application/json;base64,