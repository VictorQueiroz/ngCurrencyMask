"use strict";angular.module("ngCurrencyMask",["ngCurrencyMask.directives","ngCurrencyMask.filters","ngCurrencyMask.providers"]);
"use strict";angular.module("ngCurrencyMask.filters.currencyMask",[]).filter("currencyMask",["$masker",function(r){var n=function(r){switch(r){case"mask":return 1;case"unmask":return 2}},u=function(r){return null===r||"default"===r?null:r};return function(e,a,t){if(!e)return"";e=e.toString();var a=a?n(a):n("mask"),s=t?u(t):u(null);if(1===a){var c=r.maskValue(e,s);return c}return 2===a?r.unmaskValue(e):void 0}}]);
"use strict";angular.module("ngCurrencyMask.directives",["ngCurrencyMask.directives.ngCurrencyMask"]);
"use strict";angular.module("ngCurrencyMask.filters",["ngCurrencyMask.filters.currencyMask"]);
"use strict";angular.module("ngCurrencyMask.providers.masker",[]).provider("$masker",function(){var e=this;this.defaults={currency:"R$",maskMatches:[{replace:/(\.[0-9])(?=[0-9]{0}$)/g,"with":"$10"},{replace:/^(\d)*(?=(\d{0,})$)/g,"with":"$&,00"},{replace:/^(\d{1})$/,"with":"0,0$1"},{replace:/(\d{2})$/,"with":",$1"},{replace:/,(\d{3,})$/,"with":"$1,00"},{replace:/^,(\d{2})$/,"with":"0,$1"},{replace:/(?:\,{2,})+/g,"with":","},{replace:/[A-z{}\[\]_!\.]/g,"with":""},{replace:/(\d)(?=(\d{3})+(?!\d))/g,"with":"$1."}],unmaskMatches:[{replace:/\D/g,"with":""},{replace:/^(\d{1})$/,"with":"0.0$1"},{replace:/(\d{2})$/,"with":".$1"},{replace:/(,00|\.00$)/g,"with":""},{replace:/^(0{1,})/,"with":""},{replace:/^\.(\d{2})$/,"with":"0.$1"},{replace:function(e){if(!e)return"";var r=new RegExp(".(d{3,})$"),t=e.match(r);return t instanceof Array&&t[1]&&(e=e.replace(t,t.toString().substr(0,2))),e}}]},this.setCurrency=function(r){return e.currency=r,e},this.addUnmaskMatch=function(r,t){return e.unmaskMatches.unshift({replace:r,"with":t}),e},this.addMaskMatch=function(r,t){var a={};return t?(a.replace=r,a.with=t):a.replace=r,e.maskMatches.unshift(a),e},this.$get=function(){function r(){function r(r,t){if(!r)return r;var a=r.toString();return a=a.replace(/^/,(t?t:e.defaults.currency)+" ")}var t={};return t.maskValue=function(t,a){var c=t?t.toString():"",n=e.defaults.maskMatches;return n.forEach(function(e){c=e.replace instanceof Function?e.replace(c):c.replace(e.replace,e.with)}),c=r(c,a)},t.unmaskValue=function(r){var t=r?r.toString():"",a=e.defaults.unmaskMatches;return a.forEach(function(e){t=e.replace instanceof Function?e.replace(t):t.replace(e.replace,e.with)}),t},t}return new r}});
"use strict";angular.module("ngCurrencyMask.directives.ngCurrencyMask",[]).directive("ngCurrencyMask",["$masker",function(e){return{restrict:"A",require:["?ngModel"],link:function(r,n,t,a){var i=a[0],u=t.currency?t.currency:null,c=function(r){return e.maskValue(r,u)},l=function(r){return e.unmaskValue(r)},o=function(e){return l(e)};i.$parsers.push(o),r.$watch(t.ngModel,function(e){if(e&&!(e.length<1)){var r=c(e);r!=e&&(i.$setViewValue(r),i.$render())}}),n.bind("paste",function(e){var r=e.clipboardData||e.originalEvent.clipboardData||window.clipboardData,n=r.getData("text");isNaN(n)&&e.preventDefault()}),n.bind("keypress",function(e){var r=e.charCode,n=e.which?e.which:e.keyCode;e.ctrlKey&&118==n||0!=r&&(48>n||n>57)&&e.preventDefault()})}}}]);
"use strict";angular.module("ngCurrencyMask.providers",["ngCurrencyMask.providers.masker"]);
//# sourceMappingURL=data:application/json;base64,